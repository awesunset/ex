/*	############################################################################################################ */
/*	##<통합회원제_제휴사_연동_JS>######################################################################################### */
/*	############################################################################################################ */

var sso;

/*********************************************************************************************/
/** 제휴사사이트 번호 */
var ccoSiteNo;

/*********************************************************************************************/
/** 통합회원제 URL */
var ssoDomain;					// 통합회원제 도메인
var ssoLoginUrl;				// 통합회원제 일반로그인
var ssoSSOLoginUrl;				// 통합회원제 SSO로그인
var ssoSociLoginUrl;			// 통합회원제 소셜로그인
var ssoEsyPinUrl;				// 통합회원제 간편로그인 : PIN로그인
var ssoEsyRegUrl;				// 통합회원제 간편로그인 : 간편로그인등록
var ssoFidoLoginUrl;			// 통합회원제 간편로그인 : 지문로그인
var ssoAutoLoginUrl;			// 통합회원제 자동로그인

/*********************************************************************************************/
/** 소셜로그인 URL */
var kakaoRedirectUri;
var naverAuthURL;

/*********************************************************************************************/
/** LOTTE EATZ 사용 파라미터 */
var lotteEatzDomain;			// LOTTE EATZ 도메인
var isLoggedIn;
var isLoggedInNullChk;
var isLoggedInNiceId;
var fstLgnYn;
var gno;
var onlCno;
var custNm;
var mberType;
var onlCstTpC;
var frnYn;
var grsMarktUseYn;
var pushRecvYn;
var marktRecvYn;
var deviceCd;
var clientOs;
var clickCnt = 0;				// 버튼을 클릭한 수 : 중복선택 불가 처리 (초기세팅)

/*********************************************************************************************/
/** 통합회원제 사용 파라미터 */
var acesTkn;
var rnwTkn;
var autoLgnRgDtti;			// 자동로그인등록일시
var clntAkInf;
var aftPcMd;						// 후처리모드
var lgnTpDc;						// 로그인유형구분코드
var esyCtfDc;					// 간편인증구분코드
var _isDebug;					// 디버그모드

/*********************************************************************************************/
/** 클라이언트라이브러리 초기화 사용 파라미터 */
var urEvnmtDc;				// 사용자환경구분코드 0: PC Web 1: Mobile Web 2: Mobile App
var opMd;						// 오픈모드
var popRturUrl;					// 팝업리턴URL

var serverType;					// 서버 타입
var loginProcessChk = false;

/*********************************************************************************************/
/** SsoClientLibrary Init */
function ssoLibInit(flag, popupFlag) {
	return new Promise(function(resolve, reject) {
		var ssoObj;
		/** 통합회원제_제휴사_연동_초기_세팅 */
		var filter = "win16|win32|win64|mac|macintel";
		/*********************************************************************************************/
		/** 클라이언트라이브러리 초기화 사용 파라미터 */
		if(deviceCd == "IOS" || deviceCd == "AND"){
			urEvnmtDc = "2";
			opMd = "0";
			if(popupFlag) popRturUrl = lotteEatzDomain + "/member/ssoResult";
		} else if(filter.indexOf( navigator.platform.toLowerCase() ) < 0) {
			urEvnmtDc = "1";
			opMd = "2";
			popRturUrl = lotteEatzDomain + "/member/ssoResult";
		} else {
			urEvnmtDc = "0";
			opMd = "2";
			popRturUrl = lotteEatzDomain + "/member/ssoResult";
		}
					
		if(clntAkInf) {
			ssoObj = new SsoClientLibrary({
				ccoSiteNo: ccoSiteNo,
				clntAkInf: clntAkInf,
				acesTkn: acesTkn,
				vrblNm: "sso",					// 라이브러리 변수명
				urEvnmtDc : urEvnmtDc,			// 사용자환경구분코드 0: PC Web 1: Mobile Web 2: Mobile App
				srnOpt : {
					opMd : flag ? '0' : popupFlag ? '2' : opMd,	// 오픈모드 0: Redirect 1: iframe 2: Popup
					srnHeaderExpsYn: 'Y',		// 화면헤더노출여부
					popRturUrl : popRturUrl
				}
			});
			
			resolve(ssoObj);
		} else {
			$.ajax({
				type : "GET",					//전송방식을 지정한다 (POST,GET)
				url : "/member/ssoInitAjax",	//호출 URL을 설정한다. GET방식일경우 뒤에 파라티터를 붙여서 사용해도된다.
				dataType : "json",				//호출한 페이지의 형식이다. xml,json,html,text등의 여러 방식을 사용할 수 있다.
				success : function(data){
					autoLgnRgDtti = data.autoLgnRgDtti;	// 자동로그인등록일시
					clntAkInf = JSON.parse(data.clntAkInf);
					
					ssoObj = new SsoClientLibrary({
						ccoSiteNo: ccoSiteNo,
						clntAkInf: JSON.parse(data.clntAkInf),
						acesTkn: acesTkn,
						vrblNm: "sso",					// 라이브러리 변수명
						urEvnmtDc : urEvnmtDc,			// 사용자환경구분코드 0: PC Web 1: Mobile Web 2: Mobile App
						srnOpt : {
							opMd : flag ? '0' : popupFlag ? '2' : opMd,	// 오픈모드 0: Redirect 1: iframe 2: Popup
							srnHeaderExpsYn: 'Y',		// 화면헤더노출여부
							popRturUrl : popRturUrl
						}
					});
					
					resolve(ssoObj);
				},
				error : function(){
					console.log("서버에서 처리중 오류가 발생했습니다. 문제가 계속 발생하면 관리자에게 문의하시기 바랍니다.");
					return;
				}
			});
		}
	});
}

/*********************************************************************************************/
/** 통합회원제_제휴사_연동_초기_호출 */
function ssoInit() {
	/*********************************************************************************************/
	if(isLoggedIn === "Y"){
		$.ajax({
			url: "/member/sessionChk",
			type: "POST",
			async: false,
			success: async function(data) {
				if(data && data.isLoggedIn !== "Y") isLoggedInNullChk = "Y";
			}
		});
		
		if(isLoggedIn === "Y" && isLoggedInNullChk === "Y" && autoLoginType() === "logout") history.go(0);
	}
	
	/** 자동 로그인 호출 */
	if((isLoggedIn !== "Y" && isLoggedInNiceId !== "Y") || isLoggedInNullChk === "Y"){
		/** L.POINT 자동로그인 */
		if(autoLoginType() === "lpoint"){
			try {
				ssoLibInit().then(function(ssoObj) {
					sso = ssoObj;
					
					if(sso){
						/** API 호출 */
						sso.callApi({
							akUrl: ssoAutoLoginUrl,
							akDta: {
								rnwTkn : localStorage.getItem('rnwTkn'),
								autoLgnRgDtti : autoLgnRgDtti,
								lgnTpDc: "4"
							},
							callback: async function(rspDta){
								if ('00' == rspDta.rspC) {
									/** 자동로그인 처리 : 자동로그인을 위해 클라이언트에 갱신토큰 저장 */
									localStorage.setItem('rnwTkn', rspDta.rnwTkn);
									
									var param = {
										/** 로그인 후처리를 위해 접근토큰 전달 (필수) */
										ssoTkn: rspDta.ssoTkn,
										acesTkn: rspDta.acesTkn,
										rnwTkn: rspDta.rnwTkn,
										lgnCd: "ATL" /** 로그인 타입 */
									}
									
									/** 로그인 성공 : 통합 메인화면 */
									loginProcess(param);
								}else{
									// 로그인 실패
									if('44' == rspDta.rspC ){
										if('451' == rspDta.rspDtc ){
											await layer.alert(rspDta.rspMsgCn);
										}else{
											await layer.alert("일시적 문제가 발생하였습니다. 다시 시도해주세요.");
										}
									}
									
									/** 로그아웃 프로세스 */
									logoutProcess();
								}
							}
						});
					} else {
						console.log("sso 초기화 실패");
						throw new Exception();
					}
				});
			}catch(e){
				console.log("서버에서 처리중 오류가 발생했습니다. 문제가 계속 발생하면 관리자에게 문의하시기 바랍니다.");
				
				/** 로그아웃 프로세스 */
				logoutProcess();
			}
		/** 카카오 자동 로그인 */
		} else if(autoLoginType() === "grs") {
			var param = {
				/** 로그인 후처리를 위해 접근토큰 전달 (필수) */
				mbrTkn : localStorage.getItem('mbrTkn'),
				lgnCd: "ATL" /** 로그인 타입 */
			}
			
			/** 로그인 성공 : 통합 메인화면 */
			loginProcess(param);
		/*********************************************************************************************/
		/** SSO 로그인 호출 */
		} else if(autoLoginType() === "logout"){
			try {
				ssoLibInit().then(function(ssoObj) {
					sso = ssoObj;
					
					/*********************************************************************************************/
					/** 타 제휴사사이트에서 진입한 경우, SSO토큰을 조회 */
					var get_ssoTkn_othr_ccoSite = sso.getSsoTkn({
						callback : function (ssoTkn) {}
					});
					/** SSO토큰 조회결과 체크후, API 호출 판단 */
					if(jQuery.isEmptyObject(get_ssoTkn_othr_ccoSite) || get_ssoTkn_othr_ccoSite == "null" || get_ssoTkn_othr_ccoSite == "NULL"){
						return false;
					}
					
					/*********************************************************************************************/
					/** 요청데이터 세팅 */
					var options = {
						akUrl: ssoSSOLoginUrl,
						aftPcMd: aftPcMd,							// 통합회원제 : 로그인 후처리 정보 제공 (연동가이드 참고)
						rturUrl: window.location.href,
						rturUrlCaloMethd: 'GET',
						callback: function(rspDta){
							if ('00' == rspDta.rspC) {
								var param = {
									/** 로그인 후처리를 위해 접근토큰 전달 (필수) */
									ssoTkn: rspDta.ssoTkn,
									acesTkn: rspDta.acesTkn,
									rnwTkn: rspDta.rnwTkn,
									lgnCd: "SSO" /** 로그인 타입 */
								}
								
								/** 로그인 성공 : 통합 메인화면 */
								loginProcess(param);
								
							}else{
								/** 로그아웃 프로세스 */
								logoutProcess();
							}
						}
					};
					
					// 화면 호출 시 파라미터로 받은 SSO토큰이 있는 경우, 요청데이터 입력
					if(jQuery.isEmptyObject(get_ssoTkn_othr_ccoSite) == false && get_ssoTkn_othr_ccoSite != "null" && get_ssoTkn_othr_ccoSite != "NULL" && typeof get_ssoTkn_othr_ccoSite != "undefined"){
						options.akDta = {ssoTkn: get_ssoTkn_othr_ccoSite};
					}
					
					/*********************************************************************************************/
					/** API 호출 */
					sso.callSsoLogin(options);
				});
			}catch(e){
				// 로그인 실패
				console.log("서버에서 처리중 오류가 발생했습니다. 문제가 계속 발생하면 관리자에게 문의하시기 바랍니다.");
	
				/** 로그아웃 프로세스 */
				logoutProcess();
			}
		}
	}
}

/*********************************************************************************************/
/** 로그아웃 프로세스 */
function logoutProcess(rtnUrl){
	localStorage.removeItem("autoLogin");
	localStorage.removeItem("rnwTkn");
	localStorage.removeItem("mbrTkn");
	/*bosystems begin 20201020 IJW REQ-024*/
	localStorage.removeItem("qrUrl");
	/*bosystems end 20201020 IJW REQ-024*/
	window.location.href = "/member/logout" + (rtnUrl? '?returnUrl='+rtnUrl : '');
}

/*********************************************************************************************/
/** 통합회원제 로그아웃 호출 */
function logout(rtnUrl) {
	//if(confirm("로그아웃 하시겠습니까?")){
	if((mberType !== 'MBER' && mberType !== 'AMBR')
	 || isLoggedInKakao === 'Y' || isLoggedInNaver === 'Y'
	 || acesTkn === undefined || acesTkn === null || acesTkn === '') {
		/** 로그아웃 프로세스 */
		logoutProcess(rtnUrl);
		return;
	}
	
	ssoLibInit().then(function(ssoObj) {
		sso = ssoObj;
		
		sso.callLogout({
			callback: function(rspDta){
				/** 로그아웃 프로세스 */
				logoutProcess(rtnUrl);
			}
		});
		//}
	});
}

function lpointLogout() {
	ssoLibInit().then(function(ssoObj) {
		sso = ssoObj;
		
		sso.callLogout({
			callback: function(rspDta){
				/** 로그아웃 프로세스 */
				logoutProcess();
			}
		});
	});
}

/*********************************************************************************************/
/** 통합회원제 화면 호출 */
function callScreen(callScreenUrl, callScreenType, requestValue1, requestValue2){
	
	/*********************************************************************************************/
	/** 요청정보 세팅 */
	
	// 통합회원제 화면 호출을 위한 ssoTkn 세팅
	var ssoTkn_callScreen_param = ssoTkn;
	
	// 요청타입 세팅
	if(callScreenType == "esyReg"){						// 간편로그인등록
		lgnTpDc = requestValue1;
		esyCtfDc = requestValue2;
	}else if(callScreenType == "mbrJoin16"){			// 정회원 전환
		// 정회원 전환시에는 사용안함
		ssoTkn_callScreen_param = null;
	}
	
	/*********************************************************************************************/
	/** 요청데이터 세팅 */
	var akDta = {
			'lgnTpDc' : lgnTpDc,
			'esyCtfDc' : esyCtfDc,
			'ssoTkn' : ssoTkn_callScreen_param,
			'onlCstTpC' : onlCstTpC,
			'frnYn' : frnYn
	}
	
	/*********************************************************************************************/
	/** 통합회원제 화면 호출 후, logoutProcess() 호출이 필요한 경우 처리 */
	
	/** deviceCd 가 IOS, AND 일때 오픈모드 Popup (opMd=2) 이 아님 */
	if(jQuery.isEmptyObject(deviceCd) == false && (deviceCd == "IOS" || deviceCd == "AND")){
		/** 삭제 : 팝업 리턴 URL 세팅 (ssoResult.jsp) */
		if(jQuery.isEmptyObject(sessionStorage.getItem('ssoResult')) == false && sessionStorage.getItem('ssoResult') != "null" && sessionStorage.getItem('ssoResult') != "NULL" ){
			sessionStorage.removeItem('ssoResult');
		}
		
	/** deviceCd 가 WEB 일때 오픈모드 Popup (opMd=2) 이면 */
	}else{
		/** 삭제 : 팝업 리턴 URL 세팅 초기화 */
		sessionStorage.removeItem("ssoResult");
		
		/** 추가 : 팝업 리턴 URL 세팅 (ssoResult.jsp) */
		if(callScreenType == "mbrJoin16"){
			sessionStorage.setItem('ssoResult', 'mbrJoin16');
		}
	}
	
	/*********************************************************************************************/
	/** 통합멤버스 요청 함수 */
	if(callScreenUrl === '/exView/join/mbrJoin_01_001'){
		ssoLibInit(true).then(function(ssoObj) {
			var sso2 = ssoObj;
			sso2.callScreen({
				akUrl: callScreenUrl,							// 요청URL
				akDta: akDta,									// 요청데이터
				rturUrl: lotteEatzDomain + "/member/ssoResult",	// 제휴사리턴URL
				rturUrlCaloMethd: 'GET'							// 제휴사리턴URL호출메소드
			});
		});
	}else if(callScreenUrl === '/view/manage/mbrManage_01_000'){
		ssoLibInit(true).then(function(ssoObj) {
			var sso3 = ssoObj;
			sso3.callScreen({
				akUrl: callScreenUrl,							// 요청URL
				akDta: akDta,									// 요청데이터
				rturUrl: lotteEatzDomain + "/mypage/myInfo",	// 제휴사리턴URL
				rturUrlCaloMethd: 'GET'							// 제휴사리턴URL호출메소드
			});
		});
	}else if(callScreenUrl === "/exView/join/mbrJoin_16_001"){
		ssoLibInit(false, true).then(function(ssoObj) {
			var sso4 = ssoObj;
			sso4.callScreen({
				akUrl: callScreenUrl,							// 요청URL
				akDta: akDta,									// 요청데이터
				rturUrl: window.location.href,					// 제휴사리턴URL
				rturUrlCaloMethd: 'GET'							// 제휴사리턴URL호출메소드
			});
		});
	}else {
		ssoLibInit().then(function(ssoObj) {
			sso = ssoObj;
			sso.callScreen({
				akUrl: callScreenUrl,							// 요청URL
				akDta: akDta,									// 요청데이터
				rturUrl: window.location.href,					// 제휴사리턴URL
				rturUrlCaloMethd: 'GET'							// 제휴사리턴URL호출메소드
			});
		});
	}
}

/*********************************************************************************************/
/** 아이디로 로그인 : 통합회원제 일반로그인 API 호출 */
function login() {
	try {
		setTimeout(function(){loginProcessChk = false;},2000);
	}catch(e){
		loginProcessChk = false;
		console.log("setTimeout Error");
	}
	
	if(!loginProcessChk) loginProcessChk = true;
	else return;
	
	$.ajax({
		url: "/member/fstLgnYnAjax",
		type: "POST",
		data : { setValue : "N" }
	});
	GA_Event('click_event', '로그인_메인', '로그인', '로그인', ''); // GA 태깅
	$('[id^="login"]').removeClass("fail ");
	// valid 체크
	if(jQuery.isEmptyObject($('#onlId').val()) || jQuery.trim($('#onlId').val()) == ""){
		$("#loginId").addClass("fail ");//  아이디를 입력해 주세요.
		$('#onlId').focus();
		return false;
	}
	if(jQuery.isEmptyObject($('#password').val()) || jQuery.trim($('#password').val()) == ""){
		$("#loginpw").addClass("fail "); //비밀번호를 입력해 주세요.
		$('#password').focus();
		return false;
	}
	console.time("LOTTE MEMBERS 로그인 API 호출 시간");
	try {
		ssoLibInit().then(function(ssoObj) {
			sso = ssoObj;
		
			/** API 호출 */
			sso.callLogin({
				akUrl: ssoLoginUrl,
				akDta: {
					onlId: $.trim($('#onlId').val()),
					cstPswd: $.trim($('#password').val())
				},
				aftPcMd: aftPcMd,							// 통합회원제 : 로그인 후처리 정보 제공 (연동가이드 참고)
				rturUrl: window.location.href,
				rturUrlCaloMethd: 'GET',
				callback : function(rspDta) {
					console.timeEnd("LOTTE MEMBERS 로그인 API 호출 시간");
					if ('00' == rspDta.rspC && rspDta.rspDtc !== '401') {
						/** 아이디저장을 위해 클라이언트에 id정보 저장 */
						if($("#idSave").is(":checked")){
							var onlId = $("#onlId").val();
							localStorage.setItem('onlId', onlId);
						}else{
							localStorage.removeItem('onlId');
						}
						
						/** 자동로그인 처리 : 자동로그인을 위해 클라이언트에 갱신토큰 저장 */
						if(localStorage.getItem('autoLogin') === 'Y'){
							localStorage.setItem('rnwTkn', rspDta.rnwTkn);
						}else{
							localStorage.removeItem('rnwTkn');
						}
	
						var param = {
							/** 로그인 후처리를 위해 접근토큰 전달 (필수) */
							ssoTkn: rspDta.ssoTkn,
							acesTkn: rspDta.acesTkn,
							rnwTkn: rspDta.rnwTkn,
							lgnCd: "NML" /** 로그인 타입 */
						}
	
						/** 로그인 성공 : 통합 메인화면 */
						loginProcess(param);
	
					}else{
						loginProcessChk = false;
						// 로그인 실패
						if('44' == rspDta.rspC && '401' == rspDta.rspDtc){
							$('#password').val('');
							$('#password').focus();
						}
					}
				}
			});
		});
	}catch(e){
		loginProcessChk = false;
		console.timeEnd("LOTTE MEMBERS 로그인 API 호출 시간");
		// 로그인 실패
		console.log("서버에서 처리중 오류가 발생했습니다. 문제가 계속 발생하면 관리자에게 문의하시기 바랍니다.");
		//window.location.href = "/member/login";
	}
}

function loginProcess(param){
	const setAddress = function(data) {
		return new Promise(function(resolve, reject) {
			if(currAddress && currAddress.lnmAdres) {
				let nowDate = new Date();
				let addrObj = {
					addrRoad : currAddress.rnAdres,
					addrJibun : currAddress.lnmAdres,
					addrDetail : currAddress.rnAdresDetail,
					addrZipNo : currAddress.zipNo,
					point: {
						lat: currAddress.point && currAddress.point.lat ? currAddress.point.lat : null,
						lng: currAddress.point && currAddress.point.lng ? currAddress.point.lng : null
					},
					expire : nowDate.getTime() + 1000*60*60*24*7
				}
				localStorage.setItem("addr", JSON.stringify(addrObj));
				if (currAddress.lnmAdres != null) {
					setCookie("addr", currAddress.lnmAdres, 7);
				} else {
					setCookie("addr", currAddress.rnAdres, 7);
				}
				if(currAddress.point && currAddress.point.lat ) setCookie("latlng", currAddress.point.lng + " " + currAddress.point.lat);
				
				AddrManager.add(currAddress, function(result) {
					currAddress = result;
				});
			}
			
			resolve(data);
		});
	}
	
	var returnUrl = location.href.split("returnUrl=");
	
	if(returnUrl.length > 1){
		param = {
			...param,
			returnUrl: returnUrl[1]
		}
	} else if(location.pathname !== '/member/login'){
		param = {
			...param,
			returnUrl: location.href
		}
	}
	
	$.ajax({
		url: "/member/loginProcess",
		type: "POST",
		data : param,
		success: async function(data) {
			if(data && data.drmncyRelYn && data.drmncyRelYn === 'Y') await layer.alert(loginMsg.alert["0013"]);
			setAddress(data).then(function(data) {
				window.location.href = (data && data.returnUrl && typeof(data.returnUrl) === 'string' &&data.returnUrl.indexOf("/") > -1 ? data.returnUrl.replace(/&amp;/gi, '&') : "/");
			}).catch(function(data) {
				window.location.href = (data && data.returnUrl && typeof(data.returnUrl) === 'string' &&data.returnUrl.indexOf("/") > -1 ? data.returnUrl.replace(/&amp;/gi, '&') : "/");
			});
		},
		error: async function(data) {
			if(location.href.indexOf('/member/ssoResult') > -1) window.location.href = data.responseJSON.returnUrl;
			else await layer.alert(data.responseJSON.resultMsg);
			loginProcessChk = false;
			if(data.responseJSON.resultCd) console.log(">>>>>>>>>> CRM API ERROR <<<<<<<<<< ERROR CODE : " + data.responseJSON.resultCd);
		}
	});
}

/** Kakao 로그인 */
function loginWithKakao() {
	if(!loginProcessChk) loginProcessChk = true;
	else return;
	
	$.ajax({
		url: "/member/fstLgnYnAjax",
		type: "POST",
		data : { setValue : "N" }
	});
	let returnUrl = location.href.split("returnUrl=");
	if(returnUrl.length > 1) sessionStorage.setItem('returnUrl', returnUrl[1]);
	Kakao.Auth.authorize({
		redirectUri: lotteEatzDomain + kakaoRedirectUri,
		serviceTerms: 'Eatz_Service_202208,Eatz_Service_202209,service_220210,service_220211,service_220212,service_220213'
	});
	loginProcessChk = false;
}

/** Naver 로그인 */
function loginWithNaver() {
	if(!loginProcessChk) loginProcessChk = true;
	else return;
	
	$.ajax({
		url: "/member/fstLgnYnAjax",
		type: "POST",
		data : { setValue : "N" }
	});
	let returnUrl = location.href.split("returnUrl=");
	if(returnUrl.length > 1) sessionStorage.setItem('returnUrl', returnUrl[1]);
	//if(deviceCd === "AND") location.href = naverAuthURL;
	//else window.open(naverAuthURL, '_blank', 'width=470, height=640, resizable=0, scrollbars=no, status=0, titlebar=0, toolbar=0, left=435, top=250');
	location.href = naverAuthURL;
	loginProcessChk = false;
}

/** CI 로그인 */
function loginCi(syrupParam){
	var newForm = $('<form></form>');
	newForm.attr("method","POST");
	newForm.attr("action","/openapp/syrup");

	for (const [key, value] of Object.entries(syrupParam)) {
		newForm.append($('<input/>', {type: 'hidden', name: key, value: value }));
	}

	newForm.appendTo('body');

	newForm.submit();
}

/*	############################################################################################################ */
// 아이디 저장 설정 체크
var isOnlId = {
	save: function() {
		var onlId = localStorage.getItem('onlId');

		if(onlId != null && onlId != ''){
			$("#idSave").attr("checked", true);
			//$('#idSave').parent().attr('class', 'inputC check');
		}else{
			$("#idSave").attr("checked", false);
			//$('#idSave').parent().attr('class', 'inputC');
		}

		return onlId;
	}
}

/*	############################################################################################################ */
// 자동 로그인 설정 체크
var autoLoginType = function(){
	let isAutoLogin = localStorage.getItem('rnwTkn') ? "lpoint" :
						localStorage.getItem('mbrTkn') ? "grs" : "logout";

	if(isAutoLogin === 'logout'){
		$("#chkAutoLogin").attr("checked", false);
	}else{
		$("#chkAutoLogin").attr("checked", true);
	}
	
	return isAutoLogin;
}

/*	############################################################################################################ */
// callScreen Callback
var callScreenCallback = function() {
	if(sessionStorage.getItem("ssoJoinResult") == "mbrJoin_01"){
		/** 회원가입 완료 페이지로 이동 */
		location.href = "/member/ssoResult";
	}	
	sessionStorage.removeItem("ssoJoinResult");
}

/*	############################################################################################################ */
/** 비회원 로그인 인증 */
let LoginNoMber = {
	regExp : /^(?:(010-?\d{4})|(01[1|6|7|8|9]-?\d{3,4}))-?\d{4}$/, // 휴대폰번호 정규식
	sendFlag : true,
	cnt : 1,
	openPopup : function() {
		$("#phoneNum").val("");
		$("#crtfcNum").val("");
		$("#time1").text("");
		if(timer.timerID) {
			clearInterval(timer.timerID);
			timer.time = 180;
		}
		LoginNoMber.sendFlag = true;
		LoginNoMber.cnt = 1;
		$("#sendSmsBotton").show();
		$("#crtfcAfter").hide();
		eatzPub.front.dialogOnOff().popOpen('#popNonmemberOrder');
	},
	sendSms : async function() {
		// 약관 동의 체크
		if($('input:checkbox[id="noMemberAgree"]').is(":checked") == false) {
			await layer.alert(loginMsg.alert["0007"]);
			return;
		}

		var num = $("#phoneNum").val();

		if(num == null || num == ''){
			await layer.alert(loginMsg.alert["0010"]);
			$("#phoneNum").val("");
			return false;
		}

		if(!this.regExp.test($("#phoneNum").val())) {
			await layer.alert(loginMsg.alert["0011"]);
			$("#phoneNum").val("");
			return;
		}

		// 인증번호 전송
		$.ajax({
			url: "/member/nmbr/sendSms",
			type: "POST",
			data: $("#loginNoMberForm").serialize(),
			dataType: "json"
		}).done (function(data) {
			// 인증 버튼 숨김
			$("#sendSmsBotton").hide();

			//인증 번호 입력창 show
			$("#crtfcAfter").show();
			
			//인증번호 전송시 타이머 작동
			if(LoginNoMber.sendFlag) {
				timer.start_timer();
			}
			LoginNoMber.sendFlag = false;
		}).fail(function() {
			console.log("fail.");
		});
	},
	crtfc : async function() {
		if(LoginNoMber.sendFlag) {
			await layer.alert(loginMsg.alert["0012"]);
			return;
		}
		
		if(timer.time < 1){
			await layer.alert(loginMsg.alert["0006"]);
			return;
		}

		// 약관 동의 체크
		if($('input:checkbox[id="noMemberAgree"]').is(":checked") == false) {
			await layer.alert(loginMsg.alert["0007"]);
			return;
		}

		if($("#crtfcNum").val() == null || $("#crtfcNum").val() == ''){
			await layer.alert(loginMsg.alert["0005"]);
			return;
		}

		$("#phoneNum").attr("readonly",true);

		// 인증번호 전송
		$.ajax({
			url: "/member/nmbr/crtfc",
			type: "post",
			data: $("#loginNoMberForm").serialize(),
			//contentType: "application/json",
			dataType: "json"
		}).done (async function(data) {
			console.log(data);
			//로그인 성공시
			if(typeof data.crtfcYn != "undefined" &&  data.crtfcYn == "Y") {
				$.ajax({
					url: "/member/fstLgnYnAjax",
					type: "POST",
					data : { setValue : "N" }
				});
				var returnUrlArr = location.href.split("returnUrl=");
	
				if(returnUrlArr.length > 1){
					let returnUrl = returnUrlArr[1];
					let returnUrlChk = returnUrl.split("?")[0];
					window.location.href = (returnUrl && typeof(returnUrl) === 'string' && returnUrl.indexOf("/") > -1 && returnUrlChk !== "/mypage" ? returnUrl.replaceAll('&amp;', '&') : "/mypage/myOrderList");
				} else {
					window.location.href = "/mypage/myOrderList";
				}
				
			} else {
				if(LoginNoMber.cnt == 3){
					await layer.alert(loginMsg.alert["0008"]);
					document.location.href = "/member/login";
					return false;
				}
				//alert("인증번호가 정확하지 않습니다.\n확인 후 다시 입력해주세요.");
				await layer.alert(loginMsg.alert["0004"]);
				LoginNoMber.cnt ++;
			}

		}).fail(function() {
			console.log("fail.");
		});
	},
	//재전송
	reSend : async function() {
		await layer.alert(loginMsg.alert["0009"]);
		clearInterval(timer.timerID);
		timer.time = 180;
		timer.start_timer();
		this.sendSms();
	}
}

let timer = {
	timerID : null,	// 타이머를 핸들링하기 위한 전역 변수
	time : 180,		// 타이머 시작시의 시간

	/* 타이머를 시작하는 함수 */
	start_timer : function() {
		this.timerID = setInterval("timer.decrementTime()", 1000);
	},

	/* 남은 시간을 감소시키는 함수 */
	decrementTime : function() {
		var x1 = document.getElementById("time1");
		x1.innerHTML = timer.toMinSec(this.time);
		if(this.time > 0) this.time--;
		else {
			// 시간이 0이 되었으므로 타이머를 중지함
			clearInterval(this.timerID);
			// 시간이 만료되고 수행할 동작
			//alert("인증번호가 만료되었습니다.\n다시 실행해주세요.");
			//document.location.href = "/main/lotteeatz";
		}
	},

	/* 정수형 숫자(초 단위)를 "시:분:초" 형태로 표현하는 함수 */
	toMinSec : function(t) {
		var min;
		var sec;

		// 정수로부터 남은 시, 분, 초 단위 계산
		min = Math.floor( (t) / 60 );
		sec = t - (min*60);

		// hh:mm:ss 형태를 유지하기 위해 한자리 수일 때 0 추가
		if(min < 10) min = "0" + min;
		if(sec < 10) sec = "0" + sec;
		return(min + ":" + sec);
	}
}
